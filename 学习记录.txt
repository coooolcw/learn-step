setTimeout和setInterval以及单线程的缺陷
单线程的解决方案:worker
阻塞和异步引起的问题
同时还会和作用域问题起关联
这方面等以后学习完作用域和h5以后继续研究



div等标签结束与开始标签之间的换行符引起的间隔问题
主要以两种方法解决
1.
 <div>things</div
><div>things</div
><div>things</div
>
此法造成代码阅读变困难,排版困难

2.设置父元素font-size: 0;
推荐此种方法,但是需要在子元素上重新覆盖设置font-size,会造成css变复杂
但是代码更易维护,推荐


原生js已知元素指针获取索引
主要依靠设置元素的属性.
可遍历设置元素属性:index
然后获取索引后可直接读取属性


html特性(attribute)与dom属性(prop)的关联和区别
1.html特性为dom内建属性时会同步
2.该html特性为dom内建属性,但内建属性为boolean类型时不会同步
3.非内建属性不同步

特例:src,同步但值不同
class与className同步



学习jQuery的data方法时
提到了原生js自定义属性时会引起循环引用导致内存泄露的问题
主要查阅https://segmentfault.com/q/1010000000192427
暂时看不太懂
留待学习完闭包和函数作用域以后再查看


在学习jQuery的data方法时
第一次使用.data()获取全部自定义数据后会将该数据储存到jQuery自身的存储器(类似于内存)中
再次获取时会从该内存调用,哪怕使用attr改变了html属性也不会有反应
同时,如果有重名的自定义属性名,哪怕没有删除html的属性,而删除了jQuery的自定义属性
不会再返回html的数据.因为只会从内存中调用,不会去查询html



html5的新标签section article div的使用
https://blog.csdn.net/u011052350/article/details/22376409
具体的需要与实际工作联系.自己使用尽量在更合适的地方.


自动填充的黄色背景去除
此相关内容还有待拓展
input:-webkit-autofill {
            -webkit-box-shadow: 0 0 0px 1000px white inset;
        }

html5的新增属性
validity 属性以及返回的validityState对象
https://blog.csdn.net/baidu_25343343/article/details/54990802
https://developer.mozilla.org/zh-CN/docs/Web/API/ValidityState


CSS3新增表单属性
https://www.w3cplus.com/css/advanced-css-form-styling.html


html5默认气泡的修改
注意修改需要较多的经验和测试
https://c7sky.com/building-html5-form-validation-bubble-replacements.html
此处与html5的验证需要进一步学习,视频教程讲解不佳


::first-letter与::first-line都不对行内元素生效,具体参见
https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line
first-letter可以与::before搭配使用,可以自动匹配到content中的第一个
另外有文字匹配规则,参见
https://www.zhangxinxu.com/wordpress/2016/09/css-first-letter-pseudo-element/(注意 此文章不得转载)

content的用法https://blog.csdn.net/ganyingxie123456/article/details/70338260


selection支持的属性较少,见https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection

border-image的使用方法,书籍上介绍不甚详细
https://www.cnblogs.com/panshijie205/p/6851759.html
https://segmentfault.com/a/1190000010969367

css3渐变
https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_CSS_gradients(重要概括)
https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient
https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient
老兼容问题:
https://www.cnblogs.com/pingfan/p/5280648.html


翻阅css3文档的时候看到了新的布局模块:grid
display:grid即可自动布局
非常吸引人,在制作个人主页时必须尝试(兼容?什么兼容)


font-face
总体介绍https://www.zhangxinxu.com/wordpress/2017/03/css3-font-face-src-local/  注意版权
兼容格式http://www.webhek.com/post/font-face.html
基本只要woff


css变换   重点及难点
计划多用几天
MDN地址
https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform
MDN的教程
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms

参数说明
https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function
注意2D和3D的参数默认值是不一样的
例如translate(2D)省略Y值则默认为0;3D则不同
2D参数只有英文版https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function



老外写的参数教程
https://tympanus.net/codrops/css_reference/transform/



CSS作画处理几何图形时
实际像素是正方形,并且与设计值是等比例的.
在作图时,一定要注意旋转中心的问题
例如五角星以三个三角形旋转形成时,旋转的中心并不是center.
以下为代码
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>正五角星</title>
    <style>
        .body {
            position: relative;
            height: 600px;
            width: 1000px;
            margin: auto;
            background: skyblue;
        }

        .star {
            font-size: 0;
            position: absolute;
            left: 50%;
            top: 50%;
            margin-top: -36px;
            margin-left: -100px;
            width: 0;
            height: 0;
            border-left: 100px solid transparent;
            border-right: 100px solid transparent;
            border-top: 72.64px solid greenyellow;
        }

        .star::before {
            content: "";
            display: block;
            position: absolute;
            top: -72.5px;
            left: -100px;
            border-left: 100px solid transparent;
            border-right: 100px solid transparent;
            border-top: 72.64px solid greenyellow;
            transform: rotate(72deg);
            transform-origin: 50% 32.49px;
        }

        .star::after {
            content: "";
            display: block;
            position: absolute;
            top: -72.5px;
            left: -100px;
            border-left: 100px solid transparent;
            border-right: 100px solid transparent;
            border-top: 72.64px solid greenyellow;
            transform: rotate(-72deg);
            transform-origin: 50% 32.49px;
        }
    </style>
</head>
<body>
    <div class="body">
        <div class="star"></div>
    </div>
</body>
</html>



调查时的其他相关资料:
https://en.wikipedia.org/wiki/Pixel_aspect_ratio 像素有长宽比,在一些设备上会有不同
同时,像素大小对于手机端的显示也影响较大,有帖子声称0.5px高的div不能在手机端显示.
关于像素的帖子,讲得比较细致,但是和此处的问题相关性不太大
https://github.com/jawil/blog/issues/21


transform中的skew
实际计算是以对应的坐标乘以tanθ°
见笔记本,到时作图说明
tan90°不存在,所以图像消失
tan180°=0,所以图像不变
正负值是以右下角变形的方向为基准
因此会有顺时针逆时针设计不一致的错觉


transform矩阵使用:https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function
参考此网页
矩阵概念https://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/comment-page-1/
注意版权

在transform-style中,注意overflow:hidden会与preserve-3d属性冲突
https://www.jb51.net/css/462412.html

perspective-origin
注意观察者位置与消失点位置是相同的.
参看笔记本的图示


过渡的使用
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions
支持过渡的属性列表https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties

CSS3有自定义属性,在后期需要关注,暂时用less

transition-timing-function 
可使用自定义贝塞尔曲线达到更多的动画效果.
所有的缓动函数地址https://easings.net/zh-cn#
有很多无法直接使用css实现,需要各种插件或者js

单纯的贝塞尔曲线有可视化工具可供参考http://cubic-bezier.com/
但不支持一些复杂的缓动函数
此处若能熟练使用,可制作更多特殊的特效
其他steps的详解
https://www.songma.com/news/txtlist_i21465v.html
https://www.w3.org/TR/css-timing-1/#frames-timing-functions官方文档



CSS3动画
MDN的教程地址
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations

animation-timing-function
可在应用动画的元素内定义
也可在关键帧内定义
在关键帧内定义的值优先
关键帧内定义的值是由此关键帧到下一个关键帧,如果后续关键帧没有定义timing-function则使用到动画结束.
因此to和100%关键帧内定义的timing-function永不会生效

animation-delay的妙用
https://aotu.io/notes/2016/11/28/css3-animation-properties/
但是mdn中有一个说明意义暂时不理解
"如果为动画延迟指定了一个负值，但起始值是隐藏的，则从动画应用于元素的那一刻起就获取起始值。"

animation-fill-mode的使用
https://www.w3cplus.com/css3/understanding-css-animation-fill-mode-property.html

注意未设置的属性出现插值的前提条件,如果from和元素本身未设置,为缺省值,突然出现新的属性会无法插值,导致瞬移
https://blog.csdn.net/u013243347/article/details/79976352


will-change的使用,翻译自外国佬
https://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/
https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change要注意mdn上的提示
https://www.tuicool.com/articles/b2uQJ3利用硬件加速的坑


column多列布局
属性列表
https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Columns
基础教程
https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Using_multi-column_layouts

列宽和列数的计算公式(并不是真实的游览器计算公式,只是css标准给出的近似公式)
地址https://www.w3.org/TR/css-multicol-1/

The pseudo-algorithm below determines the used values for column-count (N) and column-width (W). There is one other variable in the pseudo-algorithm: U is the used width of the multi-column element.
The floor(X) function returns the largest integer Y ≤ X.

(01)  if ((column-width = auto) and (column-count = auto)) then
(02)      exit; /* not a multicol container */
(03)  if column-width = auto then
(04)      N := column-count
(05)  else if column-count = auto then
(06)      N := max(1,
(07)        floor((U + column-gap)/(column-width + column-gap)))
(08)  else
(09)      N := min(column-count, max(1,
(10)        floor((U + column-gap)/(column-width + column-gap))))
And:

(11)  W := max(0, ((U + column-gap)/N - column-gap))
For the purpose of finding the number of auto-repeated tracks, the UA must floor the track size to a UA-specified value to avoid division by zero. It is suggested that this floor be 1px or less.

In fragmented contexts such as in paged media, user agents may perform this calculation on a per-fragment basis.

The used value for column-count is calculated without regard for explicit column breaks or constrained column heights, while the actual value takes these into consideration.
大体翻译如下
下面的伪算法确定了列计数 (N) 和列宽 (W) 的使用值。伪算法中还有一个变量: U 是多列元素的容器宽度。
函数 floor(X) 返回最大正整数 Y ≤ X.
(01)  if ((column-width = auto) and (column-count = auto)) then
(02)      exit; /* 不是多列布局 */
(03)  if column-width = auto then
(04)      N := column-count /* 列宽为auto时实际列数就是设定值 */
(05)  else if column-count = auto then
(06)      N := max(1,
(07)        floor((U + column-gap)/(column-width + column-gap)))
/* 列宽不为auto,而列数为auto,则实际列数为
(容器宽度+列间距)/(列宽+列间距)取整,若小于1则为1列
 */
(08)  else
(09)      N := min(column-count, max(1,
(10)        floor((U + column-gap)/(column-width + column-gap))))
/* 列宽与列数都不为auto
 (容器宽度+列间距)/(列宽+列间距) 取整后的值与设定列数之间取小值
 */
And:
(11)  W := max(0, ((U + column-gap)/N - column-gap))
/* 列宽为
(容器宽度+列间距)/已求出的列数 – 列间距 */

column-rule和column-gap的属性和使用
https://blog.csdn.net/tian361zyc/article/details/74472415

column的break属性
兼容性情况较为复杂
参见mdn的具体介绍
chrome现在仍然需要-webkit-column-break-*
firefox需要page-break-*
使用时必须测试
而且支持的值基本仅限auto always aviod


zoom的介绍https://www.cnblogs.com/foodoir/p/5821018.html
但是现在zoom已经被用于设置基础缩放
https://developer.mozilla.org/zh-CN/docs/Web/CSS/@viewport
https://drafts.csswg.org/css-device-adapt/#zoom-desc
