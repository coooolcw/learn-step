https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new
创建对象时会发生的事情
1.一个继承自 Foo.prototype 的新对象被创建。
2.使用指定的参数调用构造函数 Foo ，并将 this 绑定到新创建的对象。
new Foo 等同于 new Foo()，也就是没有指定参数列表，Foo 不带任何参数调用的情况。
3.由构造函数返回的对象就是 new 表达式的结果。如果构造函数没有显式返回一个对象，则使用步骤1创建的对象。
（一般情况下，构造函数不返回值，但是用户可以选择主动返回对象，来覆盖正常的对象创建步骤）



原型与继承的概念
红皮书说得很清楚
p147~
注意点:1.prototype指向原型对象
原型对象的constructor指向构造函数
实例的__proto__(从 ECMAScript 6 开始，[[Prototype]] 可以通过Object.getPrototypeOf()和Object.setPrototypeOf()访问器来访问。
这个等同于 JavaScript 的非标准但许多浏览器实现的属性 __proto__。)指向原型对象
2.书中创建的实例不具有属性和方法,都是继承实现的
3.实例化的对象不能修改原型中的值,但是可以修改
同名属性会屏蔽从原型继承的属性,屏蔽后即使再设置为null也不会恢复指向原型的链接,只有delete可以恢复链接
4.判断是否属于自身的属性
hasOwnProperty()
5.for in返回在实例和原型中所有可访问可枚举的属性
同名属性屏蔽了原型中不可枚举属性的属性也会被返回(所有开发人员定义的都是可枚举的)
具体例子p153
Object.keys(),返回所有可枚举属性的字符串数组
单独使用in 返回该属性是否在对象中.(不论在实例还是原型中)
6.修改原型对象会立即在实例中体现,哪怕实例在修改前new;

7.[[prototype]](__prpto__)指向原型对象,而不是构造函数.
重写原型对象以后实例指向旧的原型对象,无法读取修改后的原型对象

8.原生对象也是在构造函数的原型上添加的方法.
例如Array.prototype上有sort()方法
给原生对象添加方法也可以使用prototype
例如String.prototype.somefn = function(){
  //dosomething
}
注意:一般不推荐修改原生对象的原型

9.原型模式的缺陷
1.无法传参
2.如果原型对象包括引用类型的数据,例如数组,修改其中一个会导致其他实例的此属性同时被修改.

MDNhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain
