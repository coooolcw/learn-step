1.字符串扩展
        http://es6.ruanyifeng.com/#docs/string
                模板字符串
                        https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings
                        模板字面量 是允许嵌入表达式的字符串字面量。你可以使用多行字符串和字符串插值功能。
                        它们在ES2015规范的先前版本中被称为“模板字符串”。
                        
                        模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。
                        模板字符串可以包含特定语法（${expression}）的占位符。
                        占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，
                        如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，
                        它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。
                        在模版字符串内使用反引号（`）时，需要在它前面加转义符（\）。
                        
                        如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。
                        $('#list').html(`
                        <ul>
                          <li>first</li>
                          <li>second</li>
                        </ul>
                        `);
                        上面代码中，所有模板字符串的空格和换行，都是被保留的，
                        比如<ul>标签前面会有一个换行。如果你不想要这个换行，可以使用trim方法消除它。
                        $('#list').html(`
                        <ul>
                          <li>first</li>
                          <li>second</li>
                        </ul>
                        `.trim());
                        
                字符串新增方法
                        重要方法:
                        .padStart()
                        padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。
                        填充从当前字符串的开始(左侧)应用的。
                        示例
                        'abc'.padStart(6,"123465"); // "123abc"
                        
                        .padEnd()
                        padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。
                        从当前字符串的末尾（右侧）开始填充。
                        'abc'.padEnd(11, "123456"); // "abc12345612"
                        
                        .repeat();
                        repeat() 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。
                        let resultString = str.repeat(count);
                        重复次数不能为负数
                        重复次数必须小于 infinity，且长度不会大于最长的字符串。
                        "abc".repeat(1)      // "abc"
                        传入0变为空字符串
                        
                        includes()：返回布尔值，表示是否找到了参数字符串。
                        startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。
                        endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。
                        
                        let s = 'Hello world!';
                        s.startsWith('Hello') // true
                        s.endsWith('!') // true
                        s.includes('o') // true
                        这三个方法都支持第二个参数，表示开始搜索的位置。

                        let s = 'Hello world!';
                        s.startsWith('world', 6) // true
                        s.endsWith('Hello', 5) // true
                        s.includes('Hello', 6) // false
                        上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。
                        它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。
                
                
                for...of
                        MDN
                        https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of
                        
                        http://es6.ruanyifeng.com/#docs/iterator
                        
                        ES6 借鉴 C++、Java、C# 和 Python 语言，引入了for...of循环，作为遍历所有数据结构的统一的方法。
                        一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for...of循环遍历它的成员。
                        也就是说，for...of循环内部调用的是数据结构的Symbol.iterator方法。
                        for...of循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如arguments对象、DOM NodeList 对象）
                        、后文的 Generator 对象，以及字符串。
                        
                
                unicode表示法
                        只要将码点放入大括号，就能正确解读该字符。
                        http://es6.ruanyifeng.com/#docs/string
                        "\u{20BB7}"
                        // "𠮷"
                        "\u{41}\u{42}\u{43}"
                        // "ABC"
                        
                condePointAt
                        http://es6.ruanyifeng.com/#docs/string-methods
                        ES6 提供了codePointAt()方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。
                        codePointAt()方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString()方法转换一下。
                        let s = '𠮷a';
                        s.codePointAt(0).toString(16) // "20bb7"
                        s.codePointAt(2).toString(16) // "61"
                        codePointAt()方法的参数，仍然是不正确的。比如，上面代码中，字符a在字符串s的正确位置序号应该是 1，
                        但是必须向codePointAt()方法传入 2。解决这个问题的一个办法是使用for...of循环，
                        因为它会正确识别 32 位的 UTF-16 字符。
                        let s = '𠮷a';
                        for (let ch of s) {
                          console.log(ch.codePointAt(0).toString(16));
                        }
                        
                        
                String.prototype.at()
                        获取指定下表的unicode值
                        es6的提案,暂时查不到具体消息,有可转化为es3的插件可以使用
                        https://github.com/es-shims/String.prototype.at

2.正则扩展
        http://es6.ruanyifeng.com/#docs/regex
                ES5 不允许此时使用第二个参数添加修饰符，否则会报错。
                var regex = new RegExp(/xyz/, 'i');//报错
                ES6 改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。
                而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。
                
                
                        
                        

