官网
    vue官方文档
    https://cn.vuejs.org/
    vue-cli
    https://cli.vuejs.org/zh/
    cli3的配置参考
    https://cli.vuejs.org/zh/config/
    
    vue3对于vue2的目录结构有较大的改动
    但是会替代vue2 因此直接参考vue3 cli 的官方文档 


学习历程
    1.基础用法
        直接在html中引入
            <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        
        vue学习
            1.创建实例
                略
            2.data数据绑定☆
                // 我们的数据对象
                var data = { a: 1 }
                // 该对象被加入到一个 Vue 实例中
                var vm = new Vue({
                  data: data
                })
                注意点:只有当实例被创建时 data 中存在的属性才是响应式的
            3.vue实例方法
                https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7
                待使用一段时间后补充常用方法
                
            4.生命周期钩子
                生命周期图示https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA
                重要的时间点
                    mounted
                        el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
                        如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
                        注意:该钩子在服务器端渲染期间不被调用。
                        
                        注意:不要在选项属性或回调上使用箭头函数，比如 created: () => console.log(this.a) 或
                        vm.$watch('a', newValue => this.myMethod())。
                        箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，
                        经常导致 Uncaught TypeError: Cannot read property of undefined 或 
                        Uncaught TypeError: this.myMethod is not a function 之类的错误。
            5.模板语法☆
                文本
                    数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：
                    <span>Message: {{ msg }}</span>
                    Mustache 标签将会被替代为对应数据对象上 msg 属性的值。
                    无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。
                    通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。
                    
               
                指令
                    v-html v-bind v-on
                        v-html
                            双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令
                            v-html="rawHtml"
                            注意:1.变量的值会直接作为HTML,忽略解析属性值中的数据绑定.
                                2.你不能使用 v-html 来复合局部模板
                                
                        v-bind
                            Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令
                            <div v-bind:id="dynamicId"></div>
                            对于布尔特性 (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同,
                                <button v-bind:disabled="isButtonDisabled">Button</button>
                            如果 isButtonDisabled 的值是 null、undefined 或 false，
                            则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。
                        
                        v-on
                            
                js表达式
                    对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。
                        {{ ok ? 'YES' : 'NO' }}
                        {{ message.split('').reverse().join('') }}
                        <div v-bind:id="'list-' + id"></div>
                    这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。
                    有个限制就是，每个绑定都只能包含单个表达式。
                    
                    重点:1.if语句不生效,必须使用三元表达式
                        2.模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date
                    
                    
                    
                    
                计算属性
                    
                过滤器
                

    
        
