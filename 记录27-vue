官网
    vue官方文档
    https://cn.vuejs.org/
    vue-cli
    https://cli.vuejs.org/zh/
    cli3的配置参考
    https://cli.vuejs.org/zh/config/
    
    vue3对于vue2的目录结构有较大的改动
    但是会替代vue2 因此直接参考vue3 cli 的官方文档 


学习历程
    1.基础用法
        直接在html中引入
            <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
        
        vue学习
            1.创建实例
                略
            2.data数据绑定☆
                // 我们的数据对象
                var data = { a: 1 }
                // 该对象被加入到一个 Vue 实例中
                var vm = new Vue({
                  data: data
                })
                注意点:只有当实例被创建时 data 中存在的属性才是响应式的
            3.vue实例方法
                https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7
                待使用一段时间后补充常用方法
                
            4.生命周期钩子
                生命周期图示https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA
                重要的时间点
                    mounted
                        el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。
                        如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。
                        注意:该钩子在服务器端渲染期间不被调用。
                        
                        注意:不要在选项属性或回调上使用箭头函数，比如 created: () => console.log(this.a) 或
                        vm.$watch('a', newValue => this.myMethod())。
                        箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，
                        经常导致 Uncaught TypeError: Cannot read property of undefined 或 
                        Uncaught TypeError: this.myMethod is not a function 之类的错误。
            5.模板语法☆
                文本
                    数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：
                    <span>Message: {{ msg }}</span>
                    Mustache 标签将会被替代为对应数据对象上 msg 属性的值。
                    无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。
                    通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。
                    
               
                指令
                    v-html v-bind v-on
                        v-html
                            双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令
                            v-html="rawHtml"
                            注意:1.变量的值会直接作为HTML,忽略解析属性值中的数据绑定.
                                2.你不能使用 v-html 来复合局部模板
                                
                        v-bind
                            Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令
                            <div v-bind:id="dynamicId"></div>
                            对于布尔特性 (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同,
                                <button v-bind:disabled="isButtonDisabled">Button</button>
                            如果 isButtonDisabled 的值是 null、undefined 或 false，
                            则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中。
                        
                        v-on
                            
                            
                js表达式
                    对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。
                        {{ ok ? 'YES' : 'NO' }}
                        {{ message.split('').reverse().join('') }}
                        <div v-bind:id="'list-' + id"></div>
                    这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。
                    有个限制就是，每个绑定都只能包含单个表达式。
                    
                    重点:1.if语句不生效,必须使用三元表达式
                        2.模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date
                
                动态参数☆
                    从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数
                    动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。
                    任何其它非字符串类型的值都将会触发一个警告。
                    动态参数表达式有一些语法约束，因为某些字符，例如空格和引号，放在 HTML 特性名里是无效的。
                    同样，在 DOM 中使用模板时你需要回避大写键名。
                    
                修饰符☆
                    修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。
                    例:.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()
                    
                    
            6.计算属性☆
                https://cn.vuejs.org/v2/guide/computed.html
                模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。
                    对于任何复杂逻辑，都应当使用计算属性
                    例子见https://cn.vuejs.org/v2/guide/computed.html#%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90
                    var vm = new Vue({
                      el: '#example',
                      data: {
                        message: 'Hello'
                      },
                      computed: {
                        // 计算属性的 getter
                        reversedMessage: function () {
                          // `this` 指向 vm 实例
                          return this.message.split('').reverse().join('')
                        }
                      }
                    })
                    
                vs方法
                    我们可以将同一函数定义为一个方法而不是一个计算属性。
                    两种方式的最终结果确实是完全相同的。
                    然而，不同的是计算属性是基于它们的响应式依赖进行缓存的。
                    只在相关响应式依赖发生改变时它们才会重新求值。
                    这就意味着只要 message 还没有发生改变，
                    多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。
                    
                    相比之下，每当触发重新渲染时，调用方法将总会再次执行函数
                    
                侦听☆
                    虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。
                    常用于需要ajax的数据改变
                    https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8
                    watch的api
                        https://cn.vuejs.org/v2/api/#watch
                        
                    
                
                setter
                    计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter
                    赋值vm.变量时会调用setter
                    
            7.Class 与 Style 绑定
                class
                    对象语法
                        <div v-bind:class="{ active: isActive }"></div>
                        上面的语法表示 active 这个 class 存在与否将取决于数据属性 isActive 的 truthiness
                        你可以在对象中传入更多属性来动态切换多个 class。
                        此外，v-bind:class 指令也可以与普通的 class 属性共存。
                        
                        绑定的数据对象不必内联定义在模板里
                        也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：
                        <div v-bind:class="classObject"></div>
                        data: {
                          isActive: true,
                          error: null
                        },
                        computed: {
                          classObject: function () {
                            return {
                              active: this.isActive && !this.error,
                              'text-danger': this.error && this.error.type === 'fatal'
                            }
                          }
                        }
                    数组语法
                        我们可以把一个数组传给 v-bind:class，以应用一个 class 列表
                        <div v-bind:class="[activeClass, errorClass]"></div>
                        data: {
                          activeClass: 'active',
                          errorClass: 'text-danger'
                        }
                        输出
                        <div class="active text-danger"></div>
                        在数组语法中也可以使用对象语法
                        <div v-bind:class="[{ active: isActive }, errorClass]"></div>
                    在组件上使用
                        https://cn.vuejs.org/v2/guide/class-and-style.html#%E7%94%A8%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A
                        暂缓
                style
                    v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。
                    CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名
                        <div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
                        data: {
                          activeColor: 'red',
                          fontSize: 30
                        }
                    



















                过滤器
                    https://cn.vuejs.org/v2/guide/filters.html#ad
                    

    
        
