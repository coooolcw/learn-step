1.对象概念
红皮书 p.83
基本概念: 创建方法:①字面量,常用
②new Object()
方括号访问属性与点访问的区别
1.方括号法可以通过变量访问
2.方括号法可以进行计算
3.方括号法可以包括空格
但是常用的还是点表示访问
一般除非需要变量访问,不然都用点表示法

2.函数
基本概念:红皮书p62
注意参数p66
  参数长度是传入的参数数量决定的而不是定义的时候决定的.没有传入的值自动变为undefined
  arguments[i]与传入的参数值同步,但是不是同样的内存空间
高级概念:函数是对象,函数名是指针
p110
function fn(){}不需要分号结尾.
var fn=function (){};需要分号结尾

不推荐使用new Function方式声明函数,会解析两次而且不直观
使用函数名时,不加括号访问的是指针

函数声明与表达式的主要区别:函数声明有函数提升,表达式没有

callee参
arguments.callee指向拥有此arguments的函数.在函数体内引用函数而运行中函数名改变引起的错误可以由此避免

this指向的是环境对象(例如window或object)

caller es5新属性  指向调用当前函数的函数的引用
可与arguments.callee一起使用,即arguments.callee.caller


3.匿名函数的自调用
重要
无法自调用的原因:function的解析
解决方法:1.(function(){
})();
此方法与(function (){
}());效果相同
2. var fnname = function(){}();
3.!function(){}();
只要是合法的操作符就可以让解析器不识别function从而可以直接调用
同理console.log(function(){}())可直接调用

4.构造函数
一般大写首字母
一般内容是this.XXX = XXX;

5.对象的方法的调用
注意点
window.onclick()也可直接调用
可模拟点击

方法调用1. window.fn()
2.window['anything']()
[]主要用于变量,不合法字符,并且可以求值,运算

6.函数的间接调用(非函数名或者var命名的指针)
红皮书p116
.apply()
.call()
apply可以传入数组,较为方便,也可以传入arguments对象(在函数中传入本函数的arguments到另外的函数,fn.apply(this, arguments));
这两个方法最重要的用处是扩充函数的作用域,将一个函数引入到其他作用域中使用(借函数到本作用域中使用),就不需要将函数反复放到其他对象中再使用了



7.函数的参数
按值传递,红皮书p70.
当值是一个对象的指针时,传递的是这个指针的值


参数的数量
红皮书p64~66
arguments对象可代替形参使用.
arguments.length可获取有多少个参数
